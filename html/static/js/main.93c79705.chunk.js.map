{"version":3,"sources":["components/Loading/index.js","components/TopBarProgress/index.js","components/index.js","serviceWorker.js","redux/auth/reducers.js","redux/reducers.js","redux/index.js","containers/index.js","index.js","redux/auth/actionType.js"],"names":["loading","type","style","fontSize","spin","PureComponent","progress","defaultConfig","barThickness","barColors","shadowBlur","shadowColor","TopBarProgress","topbar","show","hide","this","config","React","Component","Boolean","window","location","hostname","match","initialState","skeleton","error","message","data","reducers","state","action","AUTH_FORM","AUTH_LOADING","AUTH_ERROR","payload","AUTH_SUCCESS","combineReducers","auth","redux","createStore","applyMiddleware","thunk","LoginLayout","lazy","RegisterLayout","DefaultLayout","App","store","fallback","exact","path","render","props","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAGMA,EAAU,uBAAMC,KAAK,UAAUC,MAAO,CAAEC,SAAU,IAAMC,MAAI,I,GAE5CC,gB,gBCFlBC,EAAW,EACXC,EAAgB,CAClBC,aAAc,EACdC,UAAW,CACT,EAAK,UACL,GAAO,UACP,MAAO,WAETC,WAAY,EACZC,YAAa,qBAGTC,E,4LAIe,IAAbN,GACFO,IAAOC,OAETR,M,6CAKiB,MADjBA,GAEEO,IAAOE,S,+BAST,OAJKC,KAAKC,QACRJ,IAAOI,OAAOV,GAGT,S,GAtBkBW,IAAMC,WAA7BP,EACGK,OAASJ,IAAOI,OAyBVL,QCzCf,mC,wPCYoBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,+lBCfnC,IAAMC,EAAe,CACnBC,UAAU,EACV1B,SAAS,EACT2B,OAAO,EACPC,QAAS,KACTC,KAAM,MAyCOC,EAtCE,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCACjD,OAAQA,EAAO/B,MACb,KAAKgC,IACH,OAAO,EAAP,GACKF,EADL,CAEEL,UAAU,EACV1B,SAAS,EACT2B,OAAO,EACPC,QAAS,KACTC,KAAM,OAEV,KAAKK,IACH,OAAO,EAAP,GACKH,EADL,CAEE/B,SAAS,EACT2B,OAAO,EACPC,QAAS,OAEb,KAAKO,IACH,OAAO,EAAP,GACKJ,EADL,CAEE/B,SAAS,EACT2B,OAAO,EACPC,QAASI,EAAOI,QAAQR,SAAW,OAEvC,KAAKS,IACH,OAAO,EAAP,GACKN,EADL,CAEE/B,SAAS,EACT2B,OAAO,EACPC,QAAS,KACTC,KAAMG,EAAOI,QAAQP,MAAQ,OAEjC,QACE,OAAOE,ICrCED,EAJEQ,YAAgB,CAC/BC,SCEaC,EAFDC,YAAYX,EAAUY,YAAgBC,M,SCF9CC,EAAc1B,IAAM2B,MAAK,kBAAM,qEAC/BC,EAAiB5B,IAAM2B,MAAK,kBAAM,qEAClCE,EAAgB7B,IAAM2B,MAAK,kBAAM,8DCajCG,E,iLACM,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,MAAOT,GACf,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUU,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,OAAQ,SAAAC,GAAK,OAAI,kBAACV,EAAD,iBAAiB,EAAKU,MAAWA,OAC7E,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,YAAYC,OAAQ,SAAAC,GAAK,OAAI,kBAACR,EAAD,iBAAoB,EAAKQ,MAAWA,OACnF,kBAAC,IAAD,CAAOF,KAAK,IAAIC,OAAQ,SAAAC,GAAK,OAAI,kBAACP,EAAD,iBAAmB,EAAKO,MAAWA,gB,GAVlEjD,iBAqBlBkD,IAASF,OAAO,mBADH,kBAAM,kBAAC,EAAD,QACH,MAAUG,SAASC,eAAe,SL8E5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gCMtHnB,wIAAO,IAAM9B,EAAY,YACZC,EAAe,eACfC,EAAa,aACbE,EAAe,iB","file":"static/js/main.93c79705.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Spin, Icon } from 'antd';\n\nconst loading = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\n\nclass Loading extends PureComponent {\n  render() {\n    return (\n      <div style={{ textAlign: 'center', height: '50px' }}>\n        <Spin indicator={loading} />\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react'\nimport topbar from 'topbar'\n\nlet progress = 0\nlet defaultConfig = {\n  barThickness: 2,\n  barColors: {\n    '0': '#4169E1',\n    '0.7': '#87CEFA',\n    '1.0': '#FFFFFF',\n  },\n  shadowBlur: 5,\n  shadowColor: 'rgba(0, 0, 0, .5)',\n}\n\nclass TopBarProgress extends React.Component {\n  static config = topbar.config\n\n  componentDidMount() {\n    if (progress === 0) {\n      topbar.show()\n    }\n    progress++\n  }\n\n  componentWillUnmount() {\n    progress--\n    if (progress === 0) {\n      topbar.hide()\n    }\n  }\n\n  render() {\n    if (!this.config) {\n      topbar.config(defaultConfig)\n    }\n\n    return null\n  }\n}\n\nexport default TopBarProgress\n","import Loading from './Loading';\nimport TopBarProgress from './TopBarProgress';\n\nexport { Loading, TopBarProgress };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker.')\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed.')\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { AUTH_FORM, AUTH_LOADING, AUTH_ERROR, AUTH_SUCCESS } from './actionType'\n\nconst initialState = {\n  skeleton: false,\n  loading: false,\n  error: false,\n  message: null,\n  data: null,\n}\n\nconst reducers = (state = initialState, action) => {\n  switch (action.type) {\n    case AUTH_FORM:\n      return {\n        ...state,\n        skeleton: true,\n        loading: false,\n        error: false,\n        message: null,\n        data: null,\n      }\n    case AUTH_LOADING:\n      return {\n        ...state,\n        loading: true,\n        error: false,\n        message: null,\n      }\n    case AUTH_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: true,\n        message: action.payload.message || null,\n      }\n    case AUTH_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        message: null,\n        data: action.payload.data || null,\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducers\n","import { combineReducers } from 'redux'\nimport auth from './auth/reducers'\n\nconst reducers = combineReducers({\n  auth,\n})\n\nexport default reducers\n","import thunk from 'redux-thunk'\nimport { createStore, applyMiddleware } from 'redux'\nimport reducers from './reducers'\n\nconst redux = createStore(reducers, applyMiddleware(thunk))\n\nexport default redux\n","import React from 'react'\n\nconst LoginLayout = React.lazy(() => import('./AuthLayout/LoginLayout'))\nconst RegisterLayout = React.lazy(() => import('./AuthLayout/RegisterLayout'))\nconst DefaultLayout = React.lazy(() => import('./DefaultLayout'))\n\nexport { LoginLayout, RegisterLayout, DefaultLayout }\n","import React, { PureComponent, Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { CookiesProvider } from 'react-cookie'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\nimport 'antd/dist/antd.css'\nimport './styles/index.scss'\nimport 'react-app-polyfill/ie9'\nimport 'react-app-polyfill/ie11'\nimport 'react-app-polyfill/stable'\nimport * as serviceWorker from './serviceWorker'\n\nimport redux from './redux'\nimport { TopBarProgress } from './components'\nimport { LoginLayout, RegisterLayout, DefaultLayout } from './containers'\n\nclass App extends PureComponent {\n  render() {\n    return (\n      <CookiesProvider>\n        <Provider store={redux}>\n          <BrowserRouter>\n            <Suspense fallback={<TopBarProgress />}>\n              <Switch>\n                <Route exact path=\"/login\" render={props => <LoginLayout {...this.props} {...props} />} />\n                <Route exact path=\"/register\" render={props => <RegisterLayout {...this.props} {...props} />} />\n                <Route path=\"/\" render={props => <DefaultLayout {...this.props} {...props} />} />\n              </Switch>\n            </Suspense>\n          </BrowserRouter>\n        </Provider>\n      </CookiesProvider>\n    )\n  }\n}\n\nconst Root = () => <App />\nReactDOM.render(<Root />, document.getElementById('root'))\n// serviceWorker.register()\nserviceWorker.unregister()\n","export const AUTH_FORM = 'AUTH_FORM'\nexport const AUTH_LOADING = 'AUTH_LOADING'\nexport const AUTH_ERROR = 'AUTH_ERROR'\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS'\n"],"sourceRoot":""}